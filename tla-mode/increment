# -*- mode: snippet -*-
# name : increment example
# key  : inc
# --
----------------------------- MODULE increment -----------------------------
EXTENDS Integers, TLC

VARIABLES x, s, pc, y

vars == << x, s, pc, y >>

ProcSet == (1..2)

Init == (* Global variables *)
        /\ x = 0
        /\ s = 0
        (* Process Proc *)
        /\ y = [self \in 1..2 |-> 0]
        /\ pc = [self \in ProcSet |-> "lock"]

lock(self) == /\ pc[self] = "lock"
              /\ s >= 0
              /\ s' = s - 1
              /\ pc' = [pc EXCEPT ![self] = "l0"]
              /\ UNCHANGED << x, y >>

l0(self) == /\ pc[self] = "l0"
            /\ y' = [y EXCEPT ![self] = x + 1]
            /\ pc' = [pc EXCEPT ![self] = "l1"]
            /\ UNCHANGED << x, s >>

l1(self) == /\ pc[self] = "l1"
            /\ x' = y[self]
            /\ pc' = [pc EXCEPT ![self] = "unlock"]
            /\ UNCHANGED << s, y >>

unlock(self) == /\ pc[self] = "unlock"
                /\ s' = s + 1
                /\ pc' = [pc EXCEPT ![self] = "Done"]
                /\ UNCHANGED << x, y >>

Proc(self) == lock(self) \/ l0(self) \/ l1(self) \/ unlock(self)

Next == (\E self \in 1..2: Proc(self))
           \/ (* Disjunct to prevent deadlock on termination *)
              ((\A self \in ProcSet: pc[self] = "Done") /\ UNCHANGED vars)

Spec == /\ Init /\ [][Next]_vars
        /\ \A self \in 1..2 : SF_vars(Proc(self))

Termination == <>(\A self \in ProcSet: pc[self] = "Done")

=============================================================================
